#!/usr/bin/env python
desc="""Calculate parse score for every base of genome.
Coordinates are 1-base!

Reads in BAM file coming from PARS experiments are strand-specific.
Input is BED file generated by bedtools as follows:

for f in *.bam; do
 echo `date` $f;
 for s in + -; do
  echo " strand: $s";
  bedtools genomecov -d -5 -strand $s -g ref.fa.fai -ibam PARS_S1.bam | gzip > PARS_S1.bam.5cov.$s.txt.gz;
 done;
done
"""
epilog="""Author:
l.p.pryszcz@gmail.com

Dublin, 21/06/2012
"""

import argparse, commands, gzip, math, os, sys
from datetime import datetime
from genome_annotation import load_gtf,load_gff,genome2dict,get_gc

def _get_algs_number( bam,mapq=0 ):
    """Return number of algs in BAM at given mapq."""
    cmd = "samtools view -q %s -c %s" % (mapq,bam)
    readno = int( commands.getoutput( cmd ) )
    return readno

def get_reads_ratio( bam1,bam2 ):
    """Return ratio of reads in bam2/bam1"""
    r2 = _get_algs_number( bam2 )
    r1 = _get_algs_number( bam1 )
    return r2*1.0/r1

def open_file( fn ):
    """Return opened file handle"""
    if fn.endswith(".gz"):
        return gzip.open(fn)
    else:
        return      open(bed1)

def beds2pars( bed1,bed2,maxPars=10,c2c1ratio=1.0,strand="+",verbose=1 ):
    """Parse two bed files and report log2(bed1 count/bed2 count). """
    #pars is calculated for one base before read starts
    if   strand=="+":
        posAdd =-1
        rgb="255,0,0"
    elif strand=="-":
        posAdd = 1
        rgb="0,0,255"
    #parse bed files
    if verbose:
        sys.stderr.write("Parsing BED files...\n" )
    #write header
    """
    track type=bedGraph name=track_label description=center_label
        visibility=display_mode color=r,g,b altColor=r,g,b
        priority=priority autoScale=on|off alwaysZero=on|off
        gridDefault=on|off maxHeightPixels=max:default:min
        graphType=bar|points viewLimits=lower:upper
        yLineMark=real-value yLineOnOff=on|off
        windowingFunction=maximum|mean|minimum smoothingWindow=off|2-16
    """
    header='track type=bedGraph name="%s strand" color=%s graphType=bars viewLimits=-%s:%s windowingFunction=maximum\n' % (strand,rgb,maxPars,maxPars)
    sys.stdout.write( header )
    #open bed files
    h1 = open_file( bed1 )
    h2 = open_file( bed2 )
    pChm = None
    #for l1,l2 in zip(h1,h2):
    while True:
        try:
            l1,l2        = h1.readline(),h2.readline()
            if not l1:
                break
            chm1,pos1,c1 = l1.split()[:3]
            chm2,pos2,c2 = l2.split()[:3]        
            pos1,c1,c2   = int(pos1),int(c1),int(c2)
            if verbose and pChm != chm1:
                sys.stderr.write( " %s           \r" % chm1 )
                pChm = chm1
            #get pars score
            pars = math.log( (c2+1)/(c1*c2c1ratio+1),2 )
            if not c1+c2:
                continue
            #save output
            out = "%s\t%s\t%s\t%s\n" % (chm1,pos1+posAdd,pos1+posAdd+1,pars) #,c2-c1)
            sys.stdout.write( out )
        except StopIteration:
            break

def process_files( bam1,bam2,bed1,bed2,maxPars,strand,norm,verbose ):
    """
    """
    #get c2c1ratio
    c2c1ratio=1.0        
    if norm:
        if verbose:
            sys.stderr.write("Calculating ratio of aligned reads...\n" )
        c2c1ratio = get_reads_ratio( bam1,bam2 )
        if verbose:
            sys.stderr.write(" Ratio of alignments (%s:%s): %s\n" % (bam2,bam1,c2c1ratio) )
        
    #check if correct number of files
    beds2pars( bed1,bed2,maxPars,c2c1ratio,strand,verbose )
    
def main():

    usage  = "%(prog)s [options] S1.bam V1.bam S1.+.bed V1.+.bed"
    parser  = argparse.ArgumentParser( usage=usage,description=desc,epilog=epilog )
    
    parser.add_argument("-v", dest="verbose", default=False, action="store_true", help="verbose")    
    parser.add_argument('--version', action='version', version='1.0')
    parser.add_argument("-i", dest="files",   nargs=4, type=file,
                        help="input files        [%(default)s]")
    parser.add_argument("-m", dest="maxPars", default=7.0, type=float,
                        help="max. PARS score    [%(default)s]")
    parser.add_argument("-n", dest="norm",    default=False, action="store_true",
                        help="normalise read counts between samples [%(default)s]" )
    parser.add_argument("-s", dest="strand",  default="+", choices=("+","-"),
                        help="strand             [%(default)s]" )
 
    o = parser.parse_args()
    if o.verbose:
        sys.stderr.write( "Options: %s\n" % str(o) )

    #get fnames
    bam1,bam2,bed1,bed2 = [ f.name for f in o.files ]        
    process_files( bam1,bam2,bed1,bed2,o.maxPars,o.strand,o.norm,o.verbose )    
    
if __name__=='__main__': 
    t0 = datetime.now()
    main()
    dt = datetime.now()-t0
    sys.stderr.write( "#Time elapsed: %s\n" % dt )

